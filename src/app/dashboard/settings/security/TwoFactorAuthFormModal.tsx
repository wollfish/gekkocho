'use client';

import React, { useMemo } from 'react';
import { Divider } from '@nextui-org/divider';
import { Image } from '@nextui-org/image';
import { Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, useDisclosure } from '@nextui-org/modal';
import { Snippet } from '@nextui-org/snippet';
import { Switch } from '@nextui-org/switch';

import { useQuery } from '@tanstack/react-query';

import { generateTwoFactorSecret } from '@/actions/dashboard/settings';
import { TwoFactorAuthForm } from '@/app/dashboard/settings/security/TwoFactorAuthForm';
import { description } from '@/components/primitives';
import { UserInterface } from '@/lib/zod';

interface OwnProps {
    user: UserInterface;
}

export const TwoFactorAuthFormModal: React.FC<OwnProps> = (props) => {
    const { user } = props;

    const { isOpen, onOpen, onClose } = useDisclosure();

    const { data: tfaResponse, isLoading: _2FAGenResponseLoading } = useQuery({
        queryKey: ['generate_2fa'],
        queryFn: () => generateTwoFactorSecret(),
        enabled: isOpen && !user.otp,
    });

    const getBarcodeAndSecret = useMemo(() => {
        if (_2FAGenResponseLoading && !tfaResponse) return [null, null];

        const qrUrl = tfaResponse?.data?.data?.url || '';
        const barcode = tfaResponse?.data?.data?.barcode || '';

        const barcodeSrc = `data:image/png;base64,${barcode}`;

        const secretMatch = qrUrl.match(/secret=(\w+)/);
        const secret = secretMatch ? secretMatch[1] : null;

        return [barcodeSrc, secret];
    }, [tfaResponse, _2FAGenResponseLoading]);

    const modalContent = () => {
        if (user.otp) {
            return (
                <ModalContent>
                    <ModalHeader className="flex flex-col gap-1">
                        Disable Two Factor Authentication
                    </ModalHeader>
                    <ModalBody>
                        <p className={description({ size: 'xs', className: 'm-0' })}>
                            To <strong>Disable</strong> two-factor authentication, please
                            enter the <b>6-digit code</b> generated by your app in the field below.
                        </p>
                        <TwoFactorAuthForm status={user.otp} onClose={onClose}/>
                        <div />
                    </ModalBody>
                    <Divider/>
                    <ModalFooter>
                        <p className={description({ size: 'xs' })}>
                            <b>Note:</b> Disabling Two-Factor Authentication (2FA) reduces account security
                            and restricts key features like deposits, withdrawals, and API access.
                            We strongly recommend keeping 2FA enabled to protect your account and ensure
                            full functionality.
                        </p>
                    </ModalFooter>
                </ModalContent>
            );
        }

        return (
            <ModalContent>
                <ModalHeader className="flex flex-col gap-1">Enable Two Factor Authentication</ModalHeader>
                <ModalBody>
                    <p className={description({ size: 'xs', className: 'm-0' })}>
                        Using an authenticator app like Google Authenticator, Microsoft Authenticator,
                        Authy or iPassword, scan this QR code.
                        It will generate a <b>6 digit code</b> for you to enter below.
                    </p>
                    <div className="flex justify-center py-4">
                        <Image
                            alt="Two Factor Authentication"
                            className="rounded border border-default p-2"
                            height={160}
                            isLoading={_2FAGenResponseLoading}
                            radius="none"
                            src={getBarcodeAndSecret[0] || ''}
                            width={160}
                        />
                    </div>
                    <TwoFactorAuthForm status={user.otp} onClose={onClose}/>
                    <div className="mt-4 rounded bg-default-200/50 px-4 py-2">
                        <p className={description({ size: 'xs' })}>
                            Scan not working? Copy this code key and
                            enter it manually in your authentication app.
                        </p>
                        <div className="flex flex-wrap items-center justify-between text-sm font-bold text-primary">
                            {getBarcodeAndSecret[1]?.match(/.{1,4}/g)?.join('-') || ''}
                            <Snippet
                                classNames={{ pre: 'hidden', base: 'p-0 bg-transparent' }}
                                codeString={getBarcodeAndSecret[1]}
                                color="primary"
                                hideSymbol={true}
                                size="sm"
                                variant="flat"
                            />
                        </div>
                    </div>
                </ModalBody>
                <ModalFooter/>
            </ModalContent>
        );
    };

    return (
        <React.Fragment>
            <Switch isSelected={user.otp} onValueChange={onOpen}/>
            <Modal backdrop="blur" isDismissable={false} isOpen={isOpen} onClose={onClose} >
                {modalContent()}
            </Modal>
        </React.Fragment>
    );
};
